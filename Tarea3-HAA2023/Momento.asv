%% Foundation Overturning Safety Factor from SAP2000 excel results file
% This script reads a SAP2000 output excel file and get the overturning
% safety factor of the foundation
% Joint Reactions
% Loads
% Tarea 3 Hormigón Armado Avanzado 2023-2
% Alexis Contreras R. - Gabriel Ramos V.
% Universidad Técnica Federico Santa María

% Notes:
% * This script still does not analyze soil over the foundation loads, it
% must be added manually.

% %% Init
% clear variables
% close all
% clc

%%
% Inputs
% SAP2000ResultsDir = 'ModeloconVF_SO.xlsx';  
SAP2000ResultsDir = SAP2000ResultsFileName;
loadComb = 'ASD';
fileLoadsDir = 'loadsAndCombos.xlsx';

% Soil over the foundation
Fsuelo = -138.816; % tonf               % No quiero sacarlo desde shell loads, es más fácil y rápido así
xsuelo = 9.05; % m
ysuelo = 5; % m

% Others
cant_puntales = 10;
nLoadPatterns = 6;

%% Read
% Read tables
jointReactions = readtable(SAP2000ResultsDir, 'Sheet', 'Joint Reactions');
jointCoordinates = readtable(SAP2000ResultsDir, 'Sheet', 'Joint Coordinates');
jointLoads = readtable(fileLoadsDir, 'Sheet', 'Joint Loads - Forces');
combinations = readtable(fileLoadsDir, 'Sheet', 'Static Case 1');

% Filter Joint Reactions by loadComb
jointReactions = jointReactions(contains(jointReactions.OutputCase, loadComb), :);
combinations = combinations(contains(combinations.Case, loadComb), :);

% Filter joint Reaction by StepType
jointReactions = jointReactions(strcmp(jointReactions.StepType, 'Max'), :);

% Names of each load combination
combs_names = unique(jointReactions.OutputCase);
data = struct();

% get joint loads matrix
jointLoads_matrix = jointLoads{:,4:9}; % Vx, Vy, N, Mx, My, Mz

% fill data struct for each load combination
for i = 1:length(combs_names)
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Joint reactions
    jointReactions_filtered = jointReactions(contains(jointReactions.OutputCase, combs_names(i)), :);
    Fz = jointReactions_filtered.F3;
    Mx = jointReactions_filtered.M1;
    My = jointReactions_filtered.M2;
    joint = jointReactions_filtered(:,1);
    jointCoords = zeros(length(joint.Joint),3);
    for j = 1:length(joint.Joint)
        jointID = str2double(joint.Joint(j));
        jointCoords(j, :) = [jointCoordinates.XorR(jointID), jointCoordinates.Y(jointID), jointCoordinates.Z(jointID)];
    end
    Mx_reactions_ = Fz.*jointCoords(:, 2) + Mx; % dim: (joints x 1)
    My_reactions_ = Fz.*jointCoords(:, 1) + My; % dim: (joints x 1)
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Joint Loads
    combs_filtered = combinations(contains(combinations.Case, combs_names(i)), :);
    combs_vals = combs_filtered{:,4};                                       %
    combs_vals_ = repmat(combs_vals, [cant_puntales,1]);
    
    % Mayoramos por la combinación i
    jointLoadsCombined = jointLoads_matrix.*combs_vals_;                    % fuerza mayorada en todos los puntales
   
    % get only one load (sum all load patterns, get the load case)
    numGrupos_aux = size(jointLoadsCombined, 1) / nLoadPatterns;
    matriz_aux = reshape(jointLoadsCombined.', size(jointLoadsCombined, 2), nLoadPatterns, numGrupos_aux);
    jointLoadsSummed = sum(matriz_aux, 2);
    jointLoadsSummed = reshape(jointLoadsSummed, numGrupos_aux, size(jointLoadsCombined, 2)).';    
    jointLoadsSummed = jointLoadsSummed.';                                  % N = gamma_D*N_D + gamma_L*N_L + ....
    
    % jointLoadsSummed columns: Vx, Vy, N, Mx, My, Mz

    jointsPuntales = unique(jointLoads{:,1});                               % Id for each column
    jointCoordsLoads = zeros(length(jointsPuntales),3);                     % Init matrix for coords of each column
    for j = 1:length(jointCoordsLoads)
        jointID = str2double(jointsPuntales(j));
        jointCoordsLoads(j,:) = [jointCoordinates.XorR(jointID), jointCoordinates.Y(jointID), jointCoordinates.Z(jointID)]; % matrix of the coords of each column, each row is a (x,y,z) coord
    end

    % Write loads in vectors, each row is a column/puntal
    N_loads = jointLoadsSummed(:,3); % (cant_nodos x 1)
    Vx_loads = jointLoadsSummed(:,1); % (cant_nodos x 1)
    Vy_loads = jointLoadsSummed(:,2);
    Mx_loads = jointLoadsSummed(:,4);
    My_loads = jointLoadsSummed(:,5);
    x = jointCoordsLoads(:,1);
    y = jointCoordsLoads(:,2);
    z = jointCoordsLoads(:,3);
    % Mz_loads = jointLoadsCombined(:,6);

    % Moments generated by the loads 
    Mx_loads_ = Mx_loads + N_loads.*y + Vy_loads.*z; % (columns x 1)
    My_loads_ = My_loads + N_loads.*x + Vx_loads.*z; % (columns x 1)
    
    %%%%%%%%%%%%%%%%%%%%%%%% Soil
    Mx_soil_ = Fsuelo*combs_vals(1)*ysuelo;
    My_soil_ = Fsuelo*combs_vals(1)*xsuelo;

    % Join all moments of each force
    Mx_ = [Mx_reactions_; Mx_loads_; Mx_soil_];  % (joint x 1)
    My_ = [My_reactions_; My_loads_; My_soil_]; % (joint x 1)

    % Save to struct (era mejor guardarlo en vectores, después tengo que
    % descomponerlo)
    data(i).Mx_ = Mx_;   % (joint x 1)
    data(i).My_ = My_;   % (joint x 1)
    data(i).Mvx = sum(Mx_(Mx_ < 0)); % (1 x 1)
    data(i).Mrx = sum(Mx_(Mx_ > 0)); % (1 x 1)
    data(i).Mvy = sum(My_(My_ < 0)); % (1 x 1)
    data(i).Mry = sum(My_(My_ > 0)); % (1 x 1)
end

%% Get minimum FS
% Sort data
Mvolcante_x = zeros(length(data),1);
Mvolcante_y = zeros(length(data),1);
Mresi_x = zeros(length(data),1);
Mresi_y = zeros(length(data),1);
for i = 1:length(data)   % For each load case
    Mvolcante_x(i,1) = data(i).Mvx; 
    Mvolcante_y(i,1) = data(i).Mvy;
    Mresi_x(i,1) = data(i).Mrx;
    Mresi_y(i,1) = data(i).Mry;
end

% Safety factors for foundation overturning for each load combination
FS_x = abs(Mresi_x./Mvolcante_x); % (nLoadCases x 1)
FS_y = abs(Mresi_y./Mvolcante_y); % (nLoadCases x 1)
comb_name_x = combs_names(FS_x == min(FS_x)); % Load case name
comb_name_y = combs_names(FS_y == min(FS_y)); % Load case name

% Print results
fprintf('El menor FS_x = %.3f\n', min(FS_x))
fprintf('Ocurre para comb. %s\n\n', comb_name_x{1})
fprintf('El menor FS_y = %.3f\n', min(FS_y))
fprintf('Ocurre para comb. %s\n\n', comb_name_y{1})
